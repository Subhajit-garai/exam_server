generator client {
  provider        = "prisma-client-js"
  // output   = "./generated/client"
  previewFeatures = ["typedsql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// new table 

model copon {
  id       String   @id @unique @default(cuid())
  token    Int      @default(0) // if offer 
  count    Int      @default(0)
  cupon    String[] @default([])
  accessby String[] @default([])

  created_by String?
  created_at DateTime @default(now())
}

model botQuizConfig {
  id String @id @unique @default(cuid())

  quiztopic        String[]
  rapidtopic       String[]
  exam             String
  nextQuestionTime Int      @default(40) // in seconds
  quizOpenFor      Int      @default(60) // in seconds
  question_count   String   @default("0")
  created_by       String?
  created_at       DateTime @default(now())
}

model botInfo {
  id         String @id @unique @default(cuid())
  botuser_id String @unique
  token      String
  webhook    Json?
}

/**
 * webhook:{
 * baseurl:"http://localhost:2000/",
 * endpoint:{
 * reciveQuizData: "/reciveQuizdata",
 * startQuiz: "/startQuiz",
 * }}
 */

/**
 * feature: "user-login",
 * settings: {
 * path: ["status"],
 * equals: "open",
 * },
 * },
 */
enum UserRole {
  Admin
  User
  Bot
}

model timescale_score {
  id                String   @default(cuid())
  user_id           String
  exam_id           String
  score             Int
  not_attempt       Int?     @default(0)
  topic_wise_result Json?
  result            Json?
  time              DateTime @default(now()) @db.Timestamptz(6)

  @@id([id, time])
  @@unique([user_id, exam_id, time])
  @@index([time(sort: Desc)])
}

model leaderboard {
  id         String   @id @default(cuid())
  user_id    String?
  exam_id    String
  rank       Int
  score      Int
  updated_at DateTime @default(now())
  // user       User     @relation(fields: [user_id], references: [id])
  exam       Exam     @relation(fields: [exam_id], references: [id])
  User       User?    @relation(fields: [user_id], references: [id])

  @@unique([user_id, exam_id]) // Ensures one rank per user per exam
}

model score {
  id                String   @id @default(cuid())
  user_id           String
  exam_id           String
  leaderboard_id    String   @default(cuid())
  not_attempt       Int?     @default(0)
  score             Int
  total_questions   Int      @default(0)
  topic_wise_result Json?
  result            Json?
  time              DateTime @default(now())

  //   user       User     @relation(fields: [user_id], references: [id])
  // exam       Exam     @relation(fields: [exam_id], references: [id])

  @@unique([user_id, exam_id]) // Ensure only the latest score per user-exam
  @@index([exam_id])
  @@index([time(sort: Desc)])
}

model AppConfig {
  id         String   @id @default(cuid())
  feature    String   @unique
  settings   Json
  updated_at DateTime @updatedAt
}

enum eventType {
  RUN_NEW_QUIZ
  CREATE_QUIZ_CONTEST
  SEND_MESSAGE
  CREATE_DPP
  CREATE_EXAM
}

enum eventRuns {
  ONE
  DAILY
  WEEKLY
  MONTHLY
}

enum IssueType {
  QUESTION
  UI
  EXAM
  PAYMENT
  LOGIN
  SIGNUP
}

model Issue {
  id           String    @id @unique @default(cuid())
  type         IssueType
  note         String?
  IssueDetails Json
  status       Status    @default(Created)
  upVote       Int       @default(0)
  downVote     Int       @default(0)
  priorityVote Int       @default(0)

  created_at   DateTime @default(now())
  creator_role UserRole @default(User)
  created_by   String?
}

model events {
  id          String    @id @unique @default(cuid())
  type        eventType
  description String
  data        Json
  conditions  Json

  created_by UserRole  @default(Bot)
  created_at DateTime  @default(now())
  runs       eventRuns @default(ONE) // ones / daily
  run_at     String // Exact time to run (if applicable) // or Any for the current/any time

  @@index([type]) // Index for faster filtering by event type
  @@index([runs]) // Index for scheduling queries
  @@index([run_at]) // Index for scheduling queries
}

model EntryChargeList {
  id         String   @id @unique @default(cuid())
  created_at DateTime @default(now())
  exam       Int?
  contest    Int?
  quiz       Int?
  mock       Int?
  dpp        Int?
  subject    Int?
  created_by String?
}

enum primeStatus {
  none
  bronze
  silver
  gold
}

model SubcriptionChargelist {
  id         String   @id @unique @default(cuid())
  gold       Int?
  bronze     Int?
  silver     Int?
  created_at DateTime @default(now())
  created_by String?
}

enum purchaseType {
  subcription
  token
}

model subcriptionOffers {
  id            String       @id @unique @default(cuid())
  markedPrice   Int
  discount      Int //  40 -> 40 % off /discount
  type          purchaseType
  title         String
  price         Int
  token         Int? // if offer 
  time          String? // if subcription
  offerActive   String[]     @default([])
  offerInActive String[]     @default([])
  btncolor      String       @default("")

  created_by String?
  created_at DateTime @default(now())
}

model Order {
  id          String       @id @default(cuid())
  userId      String // Link to your user model
  order_id    String       @unique // if it is payment then it store rezorpay_order_id
  type        purchaseType @default(token)
  amount      Int
  token       Int?         @default(0)
  subcription String?      @default("")
  status      String       @default("pending") // Track order status
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  User User @relation(fields: [userId], references: [id])
}

//end new table 

model payment {
  id                  String   @id @unique @default(cuid())
  razorpay_order_id   String   @unique
  razorpay_payment_id String   @unique
  razorpay_signature  String
  amount              Int // Payment amount (in smallest currency unit, e.g., paise for INR)
  currency            String   @default("INR") // Default currency is INR
  status              String   @default("pending") // Payment status: pending, success, or failed
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String // Link to your user model
  User                User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String   @id @unique @default(cuid())
  name                String
  email               String   @unique
  contactno           String?  @default("0000000000") // only india
  password            String
  telegramid          String?  @unique
  verificationid      String?  @unique
  progressid          String?  @unique
  role                UserRole @default(User)
  join_at             DateTime @default(now())
  forgotpasswordToken String? // forget password
  resetTokenExpires   DateTime @default(now()) // forget password
  accesstoken         String[] @default([]) // only one device access token
  Exam         Exam[]
  Exam_pattern Exam_pattern[]
  Questions    Questions[]
  telegram     telegram?      @relation(fields: [telegramid], references: [id])
  verification verification?  @relation(fields: [verificationid], references: [id])
  blance       blance?
  Order        Order[]
  payment      payment[]
  leaderboard  leaderboard[]
  quiz         quiz[]
  prime        prime?
}

model prime {
  id     String      @id @unique @default(cuid())
  status primeStatus @default(none)
  userid String      @unique
  expiry DateTime    @default(now())
  User   User        @relation(fields: [userid], references: [id])
}

model verification {
  id        String  @id @unique @default(cuid())
  contactno Boolean @default(false)
  email     Boolean @default(false)
  telegram  Boolean @default(false)
  whatsapp  Boolean @default(false)
  User      User?
}

model progress {
  id              String   @id @default(cuid())
  attempted       Int      @default(0) // Total attempted
  attendedContest Int      @default(0) // Total contests attended
  attendedQuiz    Int      @default(0) // Total quizzes attended
  attendedExam    Int      @default(0) // Total exams attended
  userid          String   @unique
  rank            Int      @default(0) // Global rank
  inTopten        Int      @default(0) // Top 10 status
  accuracy        Int      @default(0)
  topinexam       Int      @default(0)
  topinContest    Int      @default(0)
  openRegister    Int      @default(0)
  lastExamid      String   @default("not seted")
  lastContestid   String   @default("not seted")
  lastQuizid      String   @default("not seted")
  lastExamRank    Int      @default(0)
  lastContestRank Int      @default(0)
  lastQuizRank    Int      @default(0)
  time            DateTime @default(now()) @db.Timestamptz(6)

  // @@index([userid]) // Faster queries by user
}

model blance {
  id          String   @id @unique @default(cuid())
  userid      String   @unique
  amount      Int      @default(0)
  ticket      Int      @default(0)
  last_update DateTime
  User        User     @relation(fields: [userid], references: [id])
}

model telegram {
  id          String   @id @unique @default(cuid())
  userid      String?
  telegramid  String?  @default("0000000000") // change it to teleid --> telegramid
  last_update DateTime @default(now())
  User        User?
}

model Questions {
  id              String        @id @unique @default(cuid())
  title           String
  options         String[]
  extra           Json? // { "code":{void main (0) {}}}
  ans             String[]
  formate         examformate   @default(Text)
  category        String
  sub_topic       String        @default("none")
  history         String[]      @default([""])
  topic           String
  explanation     String?       @default("no explanation added")
  links           String[]      @default([""])
  is_multiple_ans Boolean       @default(false)
  created_by      String
  difficulty      diffcultlevel
  created_at      DateTime      @default(now())
  status          Status        @default(Processing)
  weight          Int           @default(0)
  User            User          @relation(fields: [created_by], references: [id])
}

model Syllabus {
  id         String   @id @unique @default(cuid())
  category   String
  examname   String   @unique
  topics     String[]
  created_at DateTime @default(now())
}

model Exam_pattern {
  id              String        @id @unique @default(cuid())
  title           String?
  format          examformate   @default(Text) // it not needed 
  examname        String
  category        String
  syllabus        syllabusType  @default(Syllabus)
  topics          String[]
  difficulty      diffcultlevel @default(Easy)
  part            Boolean?
  checkbox        Boolean?
  part_Count      Int           @default(1)
  total_questions Int[]
  check           check?
  marks_values    Int[]
  neg_values      Int[]
  is_multiple_ans Int[]         @default([0, 0]) // 0 mean false 1 mean it is multiple value ans
  created_by      String
  Exam            Exam[]
  User            User          @relation(fields: [created_by], references: [id])
}

model mock_questions_set {
  id              String  @id @unique @default(cuid())
  name            String
  description     String
  questions       Json?
  exam_pattern_id String? @default("no exam pattern seted")

  question_difficulty_weight Json? // { "easy": 0, "medium": 0, "hard": 0 }
  question_subject_count     Json? // { "OS": 0, "DBMS": 0, "C": 0 }
  question_part_count        Json? // { "part1": 0, "part2": 0 }
  status                     CreationTypes @default(Processing)
  created_at                 DateTime      @default(now())
}

// model dpp {
//   id             String   @id @default(cuid())
//   title          String
//   examname       String
//   category       String
//   total_question Int      @default(5)
//   topics         String[]
//   testtype       TestType @default(Dpp)

//   questions      Json
//   created_by     String
//   start_time     String        @default("10 h")
//   date           DateTime      @default(now())
//   end_time       String        @default("10 h")
//   status         ExamStatus    @default(Public)
//   creationstatus CreationTypes @default(Processing)

//   created_at DateTime @default(now())
// }

model Exam {
  id              String          @id @unique @default(cuid())
  display_id      String?         @unique @default(nanoid(6))
  name            String?         @default("No name")
  examname        String
  category        String
  questions       Json
  examtype        ExamType        @default(Exam)
  mockSetId       String? // if examtype is Mock then it get mockset questions 
  created_at      DateTime?       @default(now())
  created_by      String
  exam_pattern_id String
  ansid           String          @unique
  status          ExamStatus      @default(Private)
  creationstatus  CreationTypes   @default(Processing)
  starttime       String?         @default("08:00 pm") //or no limit // -> it start time , at this time you can join the exam , and join process open starttime + jointime 
  jointime        String?         @default("00:15 m") // Open HH:MM:SS
  duration        String          @default("02:00 h") // HH:MM   it is time  user can give or mark ans  , ans accept onlt starttime+jointime+timelimit+ 00:10 min
  date            DateTime        @default(now())
  stage           ExamStage       @default(Registration)
  register_id     String          @default("")
  ContestRegister ContestRegister @relation(fields: [register_id], references: [id])
  AnsSheet        AnsSheet        @relation(fields: [ansid], references: [id])
  User            User            @relation(fields: [created_by], references: [id])
  exam_pattern    Exam_pattern    @relation(fields: [exam_pattern_id], references: [id])
  leaderboard     leaderboard[]
}

model ContestRegister {
  id     String   @id @unique @default(cuid())
  examId String?   @default("new_value_not_seted")
  count  Int      @default(0)
  users  String[] @default([])
  Exam   Exam[]
}

model AnsSheet {
  id     String        @id @unique @default(cuid())
  ans    Json?
  examId String?
  status CreationTypes @default(Processing)
  Exam   Exam?
  quiz   quiz?
}

model quiz {
  id              String        @id @unique @default(cuid())
  display_id      String?       @unique @default(nanoid(6))
  quizRegister_id String?       @default("Private quiz")
  name            String?       @default("No name")
  examname        String
  category        String
  questions       Json
  topics          String[]      @default([""])
  total_questions Int           @default(0) // 25 or 50 -> higher prime member
  created_at      DateTime?     @default(now())
  created_by      String        @default("No name")
  examtype        String        @default("quiz")
  ansid           String        @unique
  status          ExamStatus    @default(Private)
  creationstatus  CreationTypes @default(Processing)
  starttime       String?       @default("08:00 pm") //or no limit // -> it start time , at this time you can join the exam , and join process open starttime + jointime 
  duration        String        @default("02:00 h") // aprox end time // HH:MM   it is time  user can give or mark ans  , ans accept onlt starttime+jointime+timelimit+ 00:10 min
  date            DateTime      @default(now())
  stage           ExamStage     @default(Registration)
  quizRegister    quizRegister? @relation(fields: [quizRegister_id], references: [id])
  AnsSheet        AnsSheet      @relation(fields: [ansid], references: [id])
  User            User          @relation(fields: [created_by], references: [id])
}

enum ExamStage {
  Registration
  Started
  Ended
}

model quizRegister {
  id      String   @id @unique @default(cuid())
  quiz_id String?  @unique @default("new_value_not_seted")
  count   Int      @default(0)
  users   String[] @default([])
  quiz    quiz[]
}

model UserAns {
  id     String @id @unique @default(cuid())
  ans    Json
  examId String
  userId String
}

enum diffcultlevel {
  Easy
  Medium
  Hard
}

enum check {
  Normal
  Hybrid
}

enum Status {
  Created
  Processing
  Done
  Duplicate
  Suspended
  Close
}

enum CreationTypes {
  Processing
  Done
  Suspended
}

enum ExamStatus {
  Public
  Private
}

enum syllabusType {
  Generic
  Syllabus
}

enum examformate {
  Text
  Image
  Code
}

enum ExamType {
  Exam // dynamic exam set 
  Contest // compeations
  Mock // for fixed question set like 2024 jeca set 
  Subject // for topic 30 question
  Dpp
  Quiz
}

// enum TestType {
//   Dpp // dynamic exam set 
//   Subject // for topic 30 question 
//   Quiz
// }
